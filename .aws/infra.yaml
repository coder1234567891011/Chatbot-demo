AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  ImageUri:
    Type: String
    Description: The URI of the Docker image in ECR

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: chatbot-demo-cluster

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic to ALB
      VpcId: vpc-0df761a303c14b613
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 172.31.0.0/16

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic from ALB to ECS
      VpcId: vpc-0df761a303c14b613
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        SourceSecurityGroupId: !Ref ALBSecurityGroup

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: chatbot-demo-alb
      Scheme: internet-facing
      Subnets:
            - subnet-05efd86d3373424bd
            - subnet-0cec2ad0eeb49da63
            - subnet-0f60eca4e20611767
            - subnet-0ce94da00d8e48810
            - subnet-00ca4b3185a5de62f
            - subnet-018201170b979928c
      SecurityGroups:
        - !Ref ALBSecurityGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: chatbot-target-group
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      VpcId: vpc-0df761a303c14b613
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 8080
      Protocol: HTTP

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref Listener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values: ["/*"]
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
  
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: chatbot-task
      RequiresCompatibilities: [FARGATE]
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      ExecutionRoleArn: arn:aws:iam::897722706074:role/ecsTaskExecutionRole
      ContainerDefinitions:
        - Name: main-container
          Image: !Ref ImageUri
          PortMappings:
            - ContainerPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/chatbot-demo
              awslogs-region: us-east-1
              awslogs-stream-prefix: ecs

  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - Listener
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LaunchType: FARGATE
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: main-container
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - subnet-05efd86d3373424bd
            - subnet-0cec2ad0eeb49da63
            - subnet-0f60eca4e20611767
            - subnet-0ce94da00d8e48810
            - subnet-00ca4b3185a5de62f
            - subnet-018201170b979928c
          SecurityGroups:
            - sg-0be0e00a331ab69dc

Outputs:
  ServiceName:
    Value: !Ref ECSService
  TaskDefinitionArn:
    Value: !Ref TaskDefinition
